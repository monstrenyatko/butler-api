"""
Django settings.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import sys
import os.path
from datetime import timedelta
import logging


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Deployment checklist
#  https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# The secret key must be a large random value and it must be kept secret
SECRET_KEY = os.environ.get('BUTLER_API_DJANGO_SECRET_KEY')

# Disabled debug mode by default
DEBUG = bool(os.environ.get('DEBUG', False))

# Logger settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] [%(process)d] [%(levelname)s] [%(module)s:%(lineno)d] '
                      '%(message)s'
        },
        'simple': {
            'format': '[%(asctime)s]  [%(levelname)s] %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': os.environ.get('BUTLER_API_DJANGO_LOG_LEVEL', 'INFO'),
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'django': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'django.request': {
            'handlers': ['console'],
            'level': os.environ.get('BUTLER_API_DJANGO_REQ_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': os.environ.get('BUTLER_API_DJANGO_DB_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    }
}

ALLOWED_HOSTS = [os.environ.get('BUTLER_HOST', 'butler'), 'localhost', '127.0.0.1', '[::1]']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'auth_manager.apps.AuthManagerConfig',
    'fw_manager.apps.FwManagerConfig',
    'cert_manager.apps.CertManagerConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'butler_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'butler_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('BUTLER_DB_NAME'),
        'USER': os.environ.get('BUTLER_DB_USER'),
        'PASSWORD': os.environ.get('BUTLER_DB_PASSWORD'),
        'HOST': os.environ.get('BUTLER_DB_HOST'),
        'PORT': '',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# Django REST framework
# http://www.django-rest-framework.org/
REST_FRAMEWORK = {
    'PAGE_SIZE': 10,
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    )
}


# Other settings

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_HSTS_SECONDS = 0
AUTH_TIME_INTERVAL = timedelta(minutes=15)
APP_DATA_CERT_DIR = os.path.join(os.environ.get('BUTLER_HOME'), 'cert')
APP_DATA_CERT_KEY_FILE_UID = int(os.environ.get('BUTLER_CERT_KEY_UID', -1))
APP_DATA_CERT_KEY_FILE_GID = int(os.environ.get('BUTLER_CERT_KEY_GID', -1))
APP_DATA_CERT_KEY_FILE_MODE = int(os.environ.get('BUTLER_CERT_KEY_MODE','660'), 8)
APP_DATA_FW_DIR = os.path.join(os.environ.get('BUTLER_HOME'), 'fw')


# Load external config if required
EXTERNAL_SETTINGS = os.environ.get('BUTLER_API_DJANGO_EXTERNAL_SETTINGS_DIR', None)
if EXTERNAL_SETTINGS:
    sys.path.append(os.path.abspath(EXTERNAL_SETTINGS))
    try:
        from external_settings import *
    except ImportError as e:
        logging.getLogger(__name__).warn("Can't load `external_settings.py` from {}, error: {}".format(EXTERNAL_SETTINGS, str(e)))
